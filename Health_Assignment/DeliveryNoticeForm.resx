<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="icon_customer.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>